# Importando as bibliotecas necess√°rias para c√°lculos e gera√ß√£o de valores aleat√≥rios
import random
import math

# Criando a classe que representa um artefato alien√≠gena
class ArtefatoAlienigena:
    """
    Esta classe modela um artefato alien√≠gena e calcula sua probabilidade de ser uma amea√ßa,
    al√©m de determinar se ele √© um "Morador" ou um "Visitante" com base em seus atributos.
    """

    def __init__(self, **kwargs):
        """
        O m√©todo __init__ √© o construtor da classe.
        Ele inicializa os atributos do artefato e define a origem com base em crit√©rios geol√≥gicos e hist√≥ricos.

        Os atributos s√£o recebidos como argumentos nomeados (**kwargs) e possuem um valor padr√£o de 5,
        caso n√£o sejam fornecidos explicitamente.

        Par√¢metros:
        - kwargs: atributos do artefato (exemplo: tecnologia, impacto ambiental, etc.)
        """

        # Defini√ß√£o dos atributos principais
        self.atributos = {atributo: kwargs.get(atributo, 5) for atributo in [
            "registro_arqueologico", "impacto_ambiental", "analise_quimica", "analise_biologica"
        ]}

        # A origem do artefato √© determinada automaticamente com base nos atributos geol√≥gicos e hist√≥ricos
        self.origem = self.definir_origem()

    def definir_origem(self):
        """
        M√©todo que define se o artefato √© um "Morador" (nativo da Terra) ou "Visitante" (de origem extraterrestre).
        A classifica√ß√£o √© baseada nos atributos de registro arqueol√≥gico, impacto ambiental, an√°lise qu√≠mica e biol√≥gica.

        Retorna:
        - "Morador" se os crit√©rios forem atendidos.
        - "Visitante" caso contr√°rio.
        """

        if (self.atributos["registro_arqueologico"] >= 10 and
            self.atributos["impacto_ambiental"] >= 10 and
            self.atributos["analise_quimica"] >= 10 and
            self.atributos["analise_biologica"] >= 10):
            return "Morador"
        else:
            return "Visitante"

    def calcular_ameaca(self):
        """
        Este m√©todo calcula a probabilidade de amea√ßa do artefato com base em seus atributos.

        O c√°lculo considera a soma ponderada dos atributos definidos, normalizada para um intervalo de 0 a 100%.
        Isso garante que a probabilidade de amea√ßa seja **din√¢mica**, refletindo a influ√™ncia de cada fator.

        Retorna:
        - String formatada com a probabilidade de amea√ßa e a origem do artefato.
        """

        # C√°lculo da pontua√ß√£o de amea√ßa com base nos atributos
        score = sum(self.atributos.get(fator, 5) * 10 for fator in self.atributos)
        score = (score / (15 * len(self.atributos) * 10)) * 100
        score = min(score, 99.99)  # Limite superior de 99.99% para evitar distor√ß√µes

        # Retorno formatado com as informa√ß√µes de an√°lise
        return f"\n--- AN√ÅLISE FINAL ---\n**PROBABILIDADE DE AMEA√áA: {score:.2f}%**\nüõ∏ **ORIGEM DO ARTEFATO:** {self.origem}"

# Criando um artefato para an√°lise
artefato = ArtefatoAlienigena(
    registro_arqueologico=12, impacto_ambiental=11, analise_quimica=12, analise_biologica=10
)

# Executando a an√°lise e exibindo o resultado
resultado = artefato.calcular_ameaca()
print(resultado)
# C√≥digo aprimorado com apoio da IA Copilot - parceria de l√≥gica, carinhosamente tratada pelo codinome Bud Leal, Bud de amigo/amiga e Claudio Leal.

     
--- AN√ÅLISE FINAL ---
**PROBABILIDADE DE AMEA√áA: 75.00%**
üõ∏ **ORIGEM DO ARTEFATO:** Morador

#@title Introdu√ß√£o ao Colaboratory { display-mode: "form" }
#@markdown Este video de 3-minutos apresenta um panorama das propriedades chaves do Colaboratory:
from IPython.display import YouTubeVideo
YouTubeVideo('inN8seMm7UI', width=600, height=400)
     
